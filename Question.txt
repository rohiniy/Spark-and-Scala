Write a Scala/Spark program that implements a simple “People You Might
Know" social network friendship recommendation algorithm.  The key idea
is that if two people have a lot of mutual friends, then the system should recommend that
they connect with each other.

The input contains the adjacency list and has multiple lines in the following
format:
1. soc-LiveJournal1Adj.txt
<User><TAB><Friends>

2. userdata.txt 
The userdata.txt contains dummy data which consist of
column1 : userid
column2 : firstname
column3 : lastname
column4 : address
column5: city
column6 :state
column7 : zipcode
column8 :country
column9 :username
column10 : date of birth.

Output: The output should contain one line per user in the following format:
<User><TAB><Recommendations>
where <User> is a unique ID corresponding to a user and <Recommendations> is a
comma-separated list of unique IDs corresponding to the algorithm's recommendation of
people that <User> might know, ordered by decreasing number of mutual friends. Even if
a user has fewer than 10 second-degree friends, output all of them in decreasing order of
the number of mutual friends. If a user has no friends, you can provide an empty list of
recommendations. If
there are multiple users with the same number of mutual friends, ties are broken by
ordering them in a numerically ascending order of their user IDs.

Q2.
Using spark/scala Please answer this question by using dataset from Q1.
Given any two Users as input, output the list of the user id of their mutual friends.Output format:
UserA, UserB list userid of their mutual Friends.

Q3.
Using spark/scala, Given any two Users as input, output the list of the names and the zipcode of their
mutual friends.
Note: use the userdata.txt to get the extra user information.
Output format:
UserA id, UserB id, list of [names:zipcodes] of their mutual Friends

Q4. Using spark/scala
Step 1: Calculate the average age of the direct friends of each user.
Step 2: Sort the users by the calculated average age from step 1 in descending order.
Step 3. Output the top 20 users from step 2 with their address and the calculated average age.Using reduce-side join and job chaining:
Step 1: Calculate the average age of the direct friends of each user.
Step 2: Sort the users by the calculated average age from step 1 in descending order.
Step 3. Output the top 20 users from step 2 with their address and the calculated average age.